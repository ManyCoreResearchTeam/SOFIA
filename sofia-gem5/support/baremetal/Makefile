# Build locally without using a VLNV library
NOVLNV=1
VERBOSE=1

ARM_CORTEX_A9_CROSSCOMPILER = $(ARM_TOOLCHAIN_BARE)
ARM_CORTEX_A9_PREFIX= $(ARM_TOOLCHAIN_BARE_PREFIX)

# Default Toolchain built for ARM_CORTEX_A9
FIM_INCLUDES=-L$(SUPPORT_FOLDER)/m5 -I$(SUPPORT_FOLDER)/m5 -I$(OVP_FIM)

ARM_CORTEX_A9_CFLAGS   = -mcpu=cortex-a9 -march=armv7-a -mlittle-endian $(FIM_INCLUDES) -DGEM5
ARM_CORTEX_A9_AFLAGS   = -mcpu=cortex-a9 -march=armv7-a -mlittle-endian 
ARM_CORTEX_A9_LIBRARY  = $(FIM_INCLUDES) -L$(ARM_CORTEX_A9_CROSSCOMPILER_BAREMETAL)/arm-none-eabi/lib -L$(ARM_CORTEX_A9_CROSSCOMPILER_BAREMETAL)/lib/gcc/arm-eabi/5.3.1

#May be include depending of the cross-compiler
#~ ARM_CORTEX_A9_LINKER_SCRIPT?=-T $(BARE_METAL_FODLER)/test.ld 
ARM_CORTEX_A9_LDFLAGS0 += $(ARM_CORTEX_A9_LINKER_SCRIPT)  --specs=rdimon.specs 

ARM_CORTEX_A9_GCC      = $(ARM_CORTEX_A9_CROSSCOMPILER)/bin/$(ARM_CORTEX_A9_PREFIX)-gcc
ARM_CORTEX_A9_CC       = $(ARM_CORTEX_A9_CROSSCOMPILER)/bin/$(ARM_CORTEX_A9_PREFIX)-gcc $(ARM_CORTEX_A9_CFLAGS) $(ARM_CORTEX_A9_INCLUDES) 
ARM_CORTEX_A9_CXX      = $(ARM_CORTEX_A9_CROSSCOMPILER)/bin/$(ARM_CORTEX_A9_PREFIX)-g++ $(ARM_CORTEX_A9_CFLAGS) $(ARM_CORTEX_A9_INCLUDES)
ARM_CORTEX_A9_LINK     = $(ARM_CORTEX_A9_CROSSCOMPILER)/bin/$(ARM_CORTEX_A9_PREFIX)-gcc $(ARM_CORTEX_A9_CFLAGS) $(ARM_CORTEX_A9_INCLUDES) $(ARM_CORTEX_A9_LDFLAGS0)
ARM_CORTEX_A9_LINKXX   = $(ARM_CORTEX_A9_CROSSCOMPILER)/bin/$(ARM_CORTEX_A9_PREFIX)-g++ $(ARM_CORTEX_A9_CFLAGS) $(ARM_CORTEX_A9_INCLUDES) $(ARM_CORTEX_A9_LDFLAGS0)
ARM_CORTEX_A9_AS       = $(ARM_CORTEX_A9_CROSSCOMPILER)/bin/$(ARM_CORTEX_A9_PREFIX)-as  $(ARM_CORTEX_A9_AFLAGS)
ARM_CORTEX_A9_LD       = $(ARM_CORTEX_A9_CROSSCOMPILER)/bin/$(ARM_CORTEX_A9_PREFIX)-ld  $(ARM_CORTEX_A9_LIBRARY)
ARM_CORTEX_A9_AR       = $(ARM_CORTEX_A9_CROSSCOMPILER)/bin/$(ARM_CORTEX_A9_PREFIX)-ar
ARM_CORTEX_A9_NM       = $(ARM_CORTEX_A9_CROSSCOMPILER)/bin/$(ARM_CORTEX_A9_PREFIX)-nm
ARM_CORTEX_A9_RANLIB   = $(ARM_CORTEX_A9_CROSSCOMPILER)/bin/$(ARM_CORTEX_A9_PREFIX)-ranlib
ARM_CORTEX_A9_STRIP    = $(ARM_CORTEX_A9_CROSSCOMPILER)/bin/$(ARM_CORTEX_A9_PREFIX)-strip
ARM_CORTEX_A9_READELF  = $(ARM_CORTEX_A9_CROSSCOMPILER)/bin/$(ARM_CORTEX_A9_PREFIX)-readelf
ARM_CORTEX_A9_OBJDUMP  = $(ARM_CORTEX_A9_CROSSCOMPILER)/bin/$(ARM_CORTEX_A9_PREFIX)-objdump
ARM_CORTEX_A9_OBJCOPY  = $(ARM_CORTEX_A9_CROSSCOMPILER)/bin/$(ARM_CORTEX_A9_PREFIX)-objcopy


OPTIMISATION?=-O0 -g
PKSPD_OPTIMISATION?=-O0 -g

MULT?=
DEF?=

CROSS=ARM_CORTEX_A9
SRC?=$(wildcard *.c)

INCOBJ=$(patsubst %.c,%$(MULT).$(CROSS).o,$(SRC))
EXE=app.$(CROSS).elf

.PHONY: cleanObj

all: cleanObj $(EXE) cleanObj

%$(MULT).$(CROSS).elf: $(INCOBJ) startup.o
	@    echo "# Linking $(CROSS) $@"
	$(V) $(ARM_CORTEX_A9_LINK) -T $(BARE_METAL_FOLDER)/test.ld -o $@ $^ -lm5 -lc -lgcc
	$(V) $(ARM_CORTEX_A9_OBJDUMP) -d $@ > app.lst.FIM_log

%$(MULT).$(CROSS).o: %.c
	@    echo "# Compiling $(CROSS) $<"
	$(V) $(ARM_CORTEX_A9_CC) -c -o $@ $< -D$(CROSS) $(DEF) $(OPTIMISATION)

startup.o: $(BARE_METAL_FOLDER)/startup.s
	@    echo "# Compiling $(CROSS) $<"
	$(V) $(ARM_CORTEX_A9_AS) -o $@ -g $<

cleanObj:
	$(V) rm -f *.o

clean::
	$(V) rm -f *.$(CROSS).elf *.$(CROSS).o
	
