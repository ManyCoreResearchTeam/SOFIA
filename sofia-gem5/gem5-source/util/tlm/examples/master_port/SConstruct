#!python

# Copyright (c) 2016, Dresden University of Technology (TU Dresden)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors: Christian Menard

import os

gem5_arch = 'ARM'
gem5_variant = 'opt'
#gem5_variant = 'debug'

gem5_root = '#../../../..'

target = 'gem5.' + gem5_variant + '.sc'

env = Environment()

# Import PKG_CONFIG_PATH from the external environment
if os.environ.has_key('PKG_CONFIG_PATH'):
    env['ENV']['PKG_CONFIG_PATH'] = os.environ['PKG_CONFIG_PATH']

# search for SystemC
env.ParseConfig('pkg-config --cflags --libs systemc')

# add include dirs
env.Append(CPPPATH=[gem5_root + '/build/' + gem5_arch,
                    gem5_root + '/util/systemc',
                    gem5_root + '/util/tlm',
                    '../common'])

env.Append(LIBS=['gem5_' + gem5_variant])
env.Append(LIBPATH=[gem5_root + '/build/' + gem5_arch])

env.Append(CXXFLAGS=['-std=c++11',
                     '-DSC_INCLUDE_DYNAMIC_PROCESSES',
                     '-DTRACING_ON'])

if gem5_variant == 'debug':
    env.Append(CXXFLAGS=['-g', '-DDEBUG'])

src_systemc = [gem5_root + '/util/systemc/sc_gem5_control.cc',
               gem5_root + '/util/systemc/sc_logger.cc',
               gem5_root + '/util/systemc/sc_module.cc',
               gem5_root + '/util/systemc/stats.cc']

src_tlm     = Glob(gem5_root + '/util/tlm/*.cc')
src_main    = Glob('*.cc') + Glob('../common/*.cc')

main = env.Program(target, src_systemc + src_tlm + src_main)
